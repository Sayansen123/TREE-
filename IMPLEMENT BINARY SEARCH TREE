//SAYAN SEN SHARMA
//DATA SCIENCE
//IST SEM
//IMPLEMENT BINARY SEARCH TREE 



#include <stdio.h>
#include <stdlib.h>
struct node
	{
	int data;
	struct node*left;
	struct node*right;
    };
    //get node
    struct node* getnode()
    {
    	struct node*node;
    	node=(struct node*)malloc(sizeof(struct node));
    	if(node==NULL)
    	{
    		printf("overflow condition\n");
		}
		else
		{
			return node;
		}
	}
	//create a root
    struct node* createaroot(struct node*root)
    {
    	struct node *newnode,*temp,*previous;
    	newnode=getnode();
    	printf("enter data ");
    	scanf("%d",&newnode->data);
    	newnode->left=NULL;
    	newnode->right=NULL;
    	if(root==NULL)
    	{
    	root=newnode;
    }
    else
    {
    	root->data=newnode->data;
	}
	return root;
}
	//insert data in tree
    struct node* insert(struct node*root)
    {
    	struct node *newnode,*temp,*previous;
    	if(root==NULL)
    	{
    		printf("first create the root\n");
    		root=createaroot(root);
		}
		else
		{
    	newnode=getnode();
    	printf("enter data ");
    	scanf("%d",&newnode->data);
    	newnode->left=NULL;
    	newnode->right=NULL;
			temp=root;
			while(temp!=NULL)
			{
				previous=temp;
				if(newnode->data>temp->data)
				{
					temp=temp->right;
				}
			else if(newnode->data==temp->data)
			{
			printf("The given number already exist\n");
			break;
		}
				else
				{
					temp=temp->left;
		}
			}
				if(newnode->data<previous->data)
				{
					previous->left=newnode;
				}
				else
				{
					previous->right=newnode;
				}
			}
return root;
}
//preorder traversal purpose i.e root->left subtree->right subtree
void preorder(struct node*root)
{
	struct node*ptr; 
	ptr=root;
	if(ptr==NULL)
	{
		return;
	}
	else
	{
		printf("%d\t",ptr->data);
		preorder(ptr->left);
		preorder(ptr->right);
	}
}
//inorder traversal purpose i.e left subtree->root->right subtree
void inorder(struct node*root)
{
	struct node*ptr;
	ptr=root;
	if(ptr==NULL)
	{
		return;
	}
	else
	{
		inorder(ptr->left);
		printf("%d\t",ptr->data);
		inorder(ptr->right);
	}
}
//postorder traversal purpose i.e left subtree->right subtree->root
void postorder(struct node*root)
{
	struct node*ptr;
	ptr=root;
	if(ptr==NULL)
	{
		return;
	}
	else
	{
		postorder(ptr->left);
		postorder(ptr->right);
		printf("%d\t",ptr->data);
	}
}
//to find the minimum value of a root
struct node*minvalue(struct node *root)
{
	struct node*temp;
	temp=root;
	while(temp->left!=NULL)
	{
		temp=temp->left;
	}
	return temp;
}
//delete a node
struct node*deleteanode(struct node *root,int value)
{
	struct node *temp; 
	if(root==NULL)
	{
		return root;
	}
	else if(value<root->data)
	{
		root->left=deleteanode(root->left,value);
	}
	else if(value>root->data)
	{
		root->right=deleteanode(root->right,value);
	}
	else
	{
		//node has no child
		if(root->left==NULL&&root->right==NULL)
		{
			return NULL;
		}
		//node has one child
		//node has only left child
		else if (root->right==NULL)
		{
			temp=root;
			root=root->left;
			free(temp);
			return root;
		}
		//node has only right child
		else if (root->left==NULL)
		{
			temp=root;
			root=root->right;
			free(temp);
			return root;
		}
		//node has both child
		else
		{
			temp=minvalue(root->right);
			root->data=temp->data;
			root->right=deleteanode(root->right,temp->data);
		}
	}
		return root;
}
//searching
struct node*search(struct node*root)
{
	int ele,flag=0;
	struct node*temp,*parent;
	parent=NULL;
	temp=root;
	printf("enter your value ");
	scanf("%d",&ele);
	while(temp!=NULL&&temp->data!=ele)
	{
		parent=temp;
		if(temp->data>ele)
		{
			temp=temp->left;
		}
		else
		{
			temp=temp->right;
		}
		flag=1;
	}
	if(temp==NULL)
	{
		printf("data does not exist\n");
	}
	else if (temp->data==ele&&flag==0)
	{
		printf ("this is the root\n");
	}
	else
	{
		printf("data exist in the tree and its parent be ");
		printf("%d\n",parent->data);
	}
	return root;
}
int main()
{
	int choice,choice1;
	struct node*root=NULL;
	int value;
	while(1)
	{
	printf("enter 1 for create a root of the tree\n");
	printf("enter 2 for display\n");
	printf("enter 3 for insert a new node\n");
	printf("enter 4 for delete a node\n");
	printf("enter 5 for searching\n");
	printf("enter 6 to end the loop\n");
	printf("enter your choice ");  
	scanf("%d",&choice);
	switch(choice)
	{
		case 1:root=createaroot(root);
		break;
		case 2:
			printf("enter 1 for preorder traversal\n");
			printf("enter 2 for inorder traversal\n");
			printf("enter 3 for postorder traversal\n");
			printf("enter your choice ");
			scanf("%d",&choice1);
			switch(choice1)
			{
				case 1:preorder(root);
				printf("\n");
				break;
				case 2:inorder(root);
				printf("\n");
				break;
				case 3:postorder(root);
				printf("\n");
				break;
				default:
					break;
			}
			break;
		case 3:root=insert(root);
		break;
		case 4:printf("enter your value for deletion ");
	    scanf("%d",&value);
		root=deleteanode(root,value);
		break;
		case 5:root=search(root);
		break;
		case 6:exit(1);
		break;
		default:
			break;
	}
	}
	return 0;
}
